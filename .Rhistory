HPD.r <- hdi(taxa_post[[taxa]][-(1:burnIn),],
credMass = cov.pro)
lower.r[[taxa]] <- round(HPD.r[1], digits = 0)
upper.r[[taxa]] <- round(HPD.r[2], digits = 0)
lamda.c <- rgamma((itera-burnIn+1),
shape= con_int_specimen_blk[[sam]][[1]][taxa],
rate = con_int_specimen_blk[[sam]][[2]][taxa])
HDI.c <- hdi(lamda.c, credMass = cov.pro)
lower.c[[taxa]] <- round(HDI.c[1], digits = 0)
upper.c[[taxa]] <- round(HDI.c[2], digits = 0)
all.zero.nc[[taxa]] <-  con_int_specimen_blk[[sam]][[5]][taxa]
}
tax_names <- taxa_names(psPlByBlock[[blk]])
tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$seq.variant) %in%  tax_names)]
df <- data.frame(Species = tax_names,
xj = as.numeric(con_int_specimen_blk[[sam]][[3]]),
l.r = unlist(lower.r),
u.r = unlist(upper.r),
l.c = unlist(lower.c),
u.c = unlist(upper.c),
all.zero.nc = unlist(all.zero.nc))
# List all true taxa
df <- arrange(filter(df,(l.r > u.c) & (l.r > 0)),
desc(xj))
# If there is no true taxa
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l.r="Negative",
u.r="Negative",
l.c ="Negative",
u.c="Negative",
all.zero.nc = "Negative")
}
# collect all true taxa in the specimen
all_true_taxa <- c(all_true_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep = "")
png(filname, height = 600, width = 750)
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam],
gp <- gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(df.p,
heights = grobHeight(title) + padding,
pos = 0)
df.p <- gtable_add_grob(df.p,
list(title),
t = 1,
l = 1,
r = ncol(df.p))
grid.newpage()
grid.draw(df.p)
dev.off()
}else{
print(df)
}
all_true_taxa <- unique(all_true_taxa)
}
all_true_taxa_blk[[blk]] <- all_true_taxa
}
all_true_taxa_blk <- unlist(all_true_taxa_blk)
ps_decon <- prune_taxa(all_true_taxa_blk, ps)
all_true_taxa_blk <- unlist(all_true_taxa_blk)
all_true_taxa_blk
ASV = df.ASV$seq.variant[which(as.character(df.ASV$ASV.Genus) %in% as.character(all_true_taxa_blk))]
ASV
ps_decon <- prune_taxa(ASV, ps)
ASV = df.ASV$seq.variant[which(as.character(df.ASV$ASV.Genus) %in% as.character(all_true_taxa_blk))] %>% as.character()
ps_decon <- prune_taxa(ASV, ps)
ps_decon
set.seed(10000)
itera <- 100
burnIn <- 10
cov.pro <- .95
num_blks <- length(psByBlock)
con_int_specimen <- con_int_specimen_mar_post_true_intensities[[1]]
mar_post_true_intensities <- con_int_specimen_mar_post_true_intensities[[2]]
blk <- 1
con_int_specimen_blk <- con_int_specimen[[blk]]
mar_post_true_intensities_blk <- mar_post_true_intensities[[blk]]
sample.names <- sample_names(psPlByBlock[[blk]])
j=1
desired.sample.name <- sample.names[j]
desired.sample.index <- which(sample_names(psPlByBlock[[blk]]) %in% desired.sample.name)
desired.sample.index
tax_interested <- rownames(sort(otu_table(psPlByBlock[[blk]])[,desired.sample.index],decreasing = TRUE))[c(1:16)]
tax_interested
tax_interested_ind <- which(as.character(taxa_names(psPlByBlock[[blk]])) %in% tax_interested)
ax_interested_ind
tax_interested_ind
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
tax_names
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$ASV.Genus.Species) %in%  tax_names)]
tax_names
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
tax_names
tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$seq.variant) %in%  tax_names)]
tax_names
tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$seq.variant) %in%  tax_names)] %>% as.character()
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$seq.variant) %in%  tax_names)] %>% as.character()
taxa.post <- mar_post_true_intensities_blk[[desired.sample.index]]
burnIn <- burnIn
signal.hist <- taxa.post[tax_interested_ind]
signal.hist <- lapply(signal.hist,function(x){x[-(1:burnIn),]})
signal.df <- data.frame(do.call("cbind", signal.hist))
colnames(signal.df) <- tax_names
signal.df$group <- rep("True", length=dim(signal.df)[1])
bg <- list()
for(ind in 1:length(tax_interested_ind)){
bg[[ind]] <- rgamma((itera-burnIn+1),
shape = con_int_specimen_blk[[desired.sample.index]][[1]][tax_interested_ind[ind]],
rate = con_int_specimen_blk[[desired.sample.index]][[2]][tax_interested_ind[ind]])
}
bg.df <- data.frame(do.call("cbind",bg))
colnames(bg.df) <- tax_names
bg.df$group <- rep("Contaminant", length=dim(bg.df)[1])
bg.signal <- rbind(signal.df, bg.df)
bg.signal$group <- as.factor(bg.signal$group)
bg_sig_long <- tidyr::gather(bg.signal,key="Taxa",value="Reads",1:(dim(bg.signal)[2]-1))
bg_sig_long$Taxa <- as.factor(bg_sig_long$Taxa)
ggplot(bg_sig_long, aes(x= Reads)) +
geom_density(aes(y = ..scaled.., linetype = group)) +
facet_wrap(~Taxa,scales = "free") +
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5),
legend.title=element_blank(),
strip.text.x = element_text(size=5),
strip.background = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()) +
xlab("") +
ylab("density")
library(ggplot2)
ggplot(bg_sig_long, aes(x= Reads)) +
geom_density(aes(y = ..scaled.., linetype = group)) +
facet_wrap(~Taxa,scales = "free") +
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5),
legend.title=element_blank(),
strip.text.x = element_text(size=5),
strip.background = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()) +
xlab("") +
ylab("density")
ggplot(bg_sig_long, aes(x= Reads))+
geom_density(aes(y = ..scaled.., fill = group, color = group)) +
facet_wrap(~Taxa,scales = "free")+
scale_fill_manual(values=c("blue","brown")) +
scale_color_manual(values=c("blue","brown")) +
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5),
legend.title=element_blank(),
strip.text.x = element_text(size=5),
strip.background = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()) +
xlab("") +
ylab("density")
paste0("./Figures/", desired.sample.name,"_hist",".eps")
p <- ggplot(bg_sig_long, aes(x= Reads))+
geom_density(aes(y = ..scaled.., fill = group, color = group)) +
facet_wrap(~Taxa,scales = "free")+
scale_fill_manual(values=c("blue","brown")) +
scale_color_manual(values=c("blue","brown")) +
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5),
legend.title=element_blank(),
strip.text.x = element_text(size=5),
strip.background = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()) +
xlab("") +
ylab("density")
fileN <- paste0("./Figures/", desired.sample.name,"_hist",".eps")
ggsave(fileN, plot = p, width = 10, height = 5, device = "eps")
df
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam],
gp <- gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(df.p,
heights = grobHeight(title) + padding,
pos = 0)
df.p <- gtable_add_grob(df.p,
list(title),
t = 1,
l = 1,
r = ncol(df.p))
grid.newpage()
grid.draw(df.p)
grid.table(df.p)
df.p <- gtable_add_grob(df.p,
list(title),
t = 1,
l = 1,
r = ncol(df.p))
grid.table(df.p)
library(pkgdown)
pkgdown::build_site()
library(pkgdown)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
pkgs <- c("phyloseq",
"dplyr",
"HDInterval",
"grid",
"gtable",
"gridExtra",
"magrittr",
"ggplot2",
"DESeq2")
if (!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install(setdiff(pkgs, installed.packages()))
devtools::install_github("PratheepaJ/BARBI")
library(BARBI)
library(phyloseq)
library(dplyr)
library(HDInterval)
library(grid)
library(gtable)
library(gridExtra)
library(magrittr)
library(ggplot2)
library(DESeq2)
ps <- ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){
otu_table(ps) <- t(otu_table(ps))}
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_specimen <-  subset_samples(ps,
SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps_specimen), 1,
function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads),
yaxs="i",
xaxs="i",
main="Distribution of total reads per sample",
breaks=50)
table(sample_data(ps)$SampleType,sample_data(ps)$block)
gwtwd()
getwd()
library(rstantools)
use_rstan(pkgdir = ".", license = TRUE, auto_config = TRUE)
getwd()
Rcpp::compileAttributes()
107+81+34+1810
getwd()
library(devtools)
devtools::missing_s3()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
pkgs <- c("phyloseq",
"dplyr",
"HDInterval",
"grid",
"gtable",
"gridExtra",
"magrittr",
"ggplot2",
"DESeq2")
if (!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install(setdiff(pkgs, installed.packages()))
devtools::install_github("PratheepaJ/BARBI")
library(BARBI)
library(phyloseq)
library(dplyr)
library(HDInterval)
library(grid)
library(gtable)
library(gridExtra)
library(magrittr)
library(ggplot2)
library(DESeq2)
library(rstan)
ps <- ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){
otu_table(ps) <- t(otu_table(ps))}
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_specimen <-  subset_samples(ps,
SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps_specimen), 1,
function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads),
yaxs="i",
xaxs="i",
main="Distribution of total reads per sample",
breaks=50)
table(sample_data(ps)$SampleType,sample_data(ps)$block)
psBlockResult <- psBlockResults(ps,
sampleTypeVar = "SampleType",
caselevels = c("Standard"),
controllevel = c("Negative"),
sampleName = "sampleID",
blockVar = "block")
devtools::load_all(".")
ps
short.sample.names = c(paste0("NC.", c(1,10)),
paste0("Di.", seq(1,8)),
paste0("NC.", seq(2,9)))
sample_names(ps) = short.sample.names
x = t(get_taxa(ps))
dimnames(x) = NULL
stan.data <- list(K = K,
V = ncol(x),
D = nrow(x),
n = x,
alpha = rep(1, K),
gamma = rep(0.5, ncol(x))
)
K = 4
stan.data <- list(K = K,
V = ncol(x),
D = nrow(x),
n = x,
alpha = rep(1, K),
gamma = rep(0.5, ncol(x))
)
LDAtopicmodel = function(stan_data,
iter = 2000,
chains = 1,
cores = 1,
sample_file = NULL,
diagnostic_file = NULL){
stan_data = stan_data
stan.fit = rstan::sampling(stanmodels$lda,
data = stan.data,
iter = iter,
chains = chains,
sample_file = sample_file,
diagnostic_file = diagnostic_file,
cores = cores)
return(stan.fit)
}
stan.fit = LDAtopicmodel(stan_data = stan.data, iter = 50)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::load_all(".")
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(BARBI)
library(phyloseq)
library(dplyr)
library(HDInterval)
library(grid)
library(gtable)
library(gridExtra)
library(magrittr)
library(ggplot2)
library(DESeq2)
ps <- ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){
otu_table(ps) <- t(otu_table(ps))}
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_specimen <-  subset_samples(ps,
SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps_specimen), 1,
function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads),
yaxs="i",
xaxs="i",
main="Distribution of total reads per sample",
breaks=50)
table(sample_data(ps)$SampleType,sample_data(ps)$block)
short.sample.names = c(paste0("NC.", c(1,10)),
paste0("Di.", seq(1,8)),
paste0("NC.", seq(2,9)))
sample_names(ps) = short.sample.names
x = t(get_taxa(ps))
dimnames(x) = NULL
K = 4
stan.data <- list(K = K,
V = ncol(x),
D = nrow(x),
n = x,
alpha = rep(1, K),
gamma = rep(0.5, ncol(x))
)
stan.fit = LDAtopicmodel(stan_data = stan.data, iter = 50, chains = 1)
theta = samples$theta
samples = rstan::extract(stan.fit, permuted = TRUE, inc_warmup = FALSE, include = TRUE)
theta = samples$theta
names(theta) = c("theta", "Sample", "Topic")
dimnames(theta)[[2]] = sample_names(ps)
dimnames(theta)[[3]] = c(paste0("Topic ", seq(1,K)))
theta.all = melt(theta)
library(reshape2)
theta = samples$theta
names(theta) = c("theta", "Sample", "Topic")
dimnames(theta)[[2]] = sample_names(ps)
dimnames(theta)[[3]] = c(paste0("Topic ", seq(1,K)))
theta.all = melt(theta)
colnames(theta.all) = c("Iteration", "Sample", "Topic", "topic.dis")
theta.all$Sample = factor(theta.all$Sample)
theta.all$Topic = factor(theta.all$Topic)
# add control or dilution series
sam = sample_data(ps) %>% data.frame()
sam$unique_names = rownames(sam)
theta.all = left_join(theta.all, sam, by =c("Sample"= "unique_names"))
theta.all$Sample_Type = factor(theta.all$Sample_Type)
head(theta.all)
theta.all$Sample_Type = factor(theta.all$SampleType)
ggplot(data = theta.all) +
geom_boxplot(aes(x = Sample,
y = topic.dis,
color = Topic)) +
facet_grid(Topic ~ Sample_Type, scales = "free_x") +
ylab(bquote(theta[k])) +
ggtitle("") +
theme(plot.title = element_text(hjust = 0.5, size = 15),
strip.text.y= element_text(size = 12),
strip.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.position = "none")
beta = samples$beta
dimnames(beta)[[2]] = c(paste0("Topic ", seq(1,K)))
tax_tab = tax_table(ps) %>% data.frame()
tax_tab = mutate(tax_tab, seq.variant = rownames(tax_tab))
dimnames(beta)[[3]] =tax_tab[, "seq.variant"]
beta.all = melt(beta)
colnames(beta.all) = c("Chain", "Topic", "ASV", "ASV.distribution")
beta.all = left_join(beta.all, tax_tab, by = c("ASV"= "seq.variant"))
beta.all$Topic = factor(beta.all$Topic)
beta.all$ASV = factor(beta.all$ASV)
library(ggwordcloud)
max.beta.in.each.asv.all.topics = group_by(beta.all,
Topic,
Family,
Genus) %>% summarise(max_beta = max(ASV.distribution)) %>% top_n(10, max_beta) %>% as.data.frame()
ggplot(max.beta.in.each.asv.all.topics,
aes(label = Genus, size = max_beta, color = Family)) +
geom_text_wordcloud() +
theme_minimal() +
scale_size_area(max_size = 11) +
facet_wrap(~ Topic) +
theme(strip.text.x = element_text(size = 12, face = "bold"))
use_build_ignore("docs/)
use_build_ignore("docs/")
install.packages("usethis")
use_build_ignore("docs/")
library(usethis)
library(usethis)
use_build_ignore("docs/")
class(beta.all$ASV)
class(tax_tab$seq.variant)
beta = samples$beta
dimnames(beta)[[2]] = c(paste0("Topic ", seq(1,K)))
tax_tab = tax_table(ps) %>% data.frame()
tax_tab = mutate(tax_tab, seq.variant = rownames(tax_tab))
dimnames(beta)[[3]] =tax_tab[, "seq.variant"]
beta.all = melt(beta)
colnames(beta.all) = c("Chain", "Topic", "ASV", "ASV.distribution")
beta.all$ASV = as.character(beta.all$ASV)
beta.all = left_join(beta.all, tax_tab, by = c("ASV"= "seq.variant"))
beta.all$Topic = factor(beta.all$Topic)
beta.all$ASV = factor(beta.all$ASV)
library(BARBI)
library(pkgdown)
pkgdown::build_site()
library(BARBI)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
max.beta.in.each.asv.all.topics = group_by(beta.all,
Topic,
Family,
Genus) %>% summarise(max_beta = max(ASV.distribution)) %>% top_n(10, max_beta) %>% as.data.frame()
ggplot(max.beta.in.each.asv.all.topics,
aes(label = Genus, size = max_beta, color = Family)) +
geom_text_wordcloud() +
theme_minimal() +
scale_size_area(max_size = 8) +
facet_wrap(~ Topic) +
theme(strip.text.x = element_text(size = 12, face = "bold"))
pkgdown::build_site()
