lower.s[[taxa]] <- round(hdi.v[1], digits = 0)
upper.s[[taxa]] <- round(hdi.v[2], digits = 0)
bb <- rgamma((itera-burnIn+1), shape= gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
exp_bb <- gammPrior[[sam]][[1]][taxa]/gammPrior[[sam]][[2]][taxa]
hdi.b <- hdi(bb, credMass = cov.pro)
lower.b[[taxa]] <- round(hdi.b[1], digits = 0)
upper.b[[taxa]] <- round(hdi.b[2], digits = 0)
all.zero.nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l.s = unlist(lower.s),
u.s = unlist(upper.s),
l.b = unlist(lower.b),
u.b = unlist(upper.b),
all.zero.nc = unlist(all.zero.nc))
df <- arrange(filter(df,(l.s > u.b) & (l.s > 0)), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l.s="Negative",
u.s="Negative",
l.b ="Negative",
u.b="Negative",
all.zero.nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(
df.p, heights = grobHeight(title) + padding, pos = 0
)
df.p <- gtable_add_grob(
df.p, list(title),
t = 1, l = 1, r = ncol(df.p)
)
grid.newpage()
grid.draw(df.p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
#' @return A list of estimated distribution parameters for the intensity of contamination in negative control samples.
#' @examples
#' \dontrun{
#' alphaBetaNegControl(psNCByBlock)
#' }
#' @import DESeq2
#' @importFrom SummarizedExperiment assays
#' @importFrom Biobase rowMedians
#' @importFrom stats median var runif dgamma rgamma
#' @export
alphaBetaNegControl <- function(psNCbyBlock, stringent = FALSE) {
compAlphaBeta <- lapply(psNCbyBlock, function(x) {
ps.to.dq <- phyloseq_to_deseq2(x, design = ~1)
geo.mean <- function(y) {
if(all(y == 0)){
val <- 0
}else{
val <- exp(sum(log(y[y > 0]))/length(y))
}
return(val)
}
geom.mean.row <- apply(counts(ps.to.dq), 1, FUN = geo.mean)
ps.to.dq <- estimateSizeFactors(ps.to.dq, geoMeans = geom.mean.row)
dq <- DESeq(ps.to.dq, fitType = "local", minReplicatesForReplace= Inf)
library.size.norm <- sizeFactors(dq)
ot.tab <- t(t(otu_table(x))/library.size.norm)
S_j0 <- round(min(colSums(ot.tab)), digits = 0)
mu_ij_0_all <- assays(dq)[["mu"]]
mu_ij_0 <- apply(mu_ij_0_all, 1, function(x){
max(x, na.rm = T)
})
gamma_ij_0 <- dispersions(dq)
species_name <- taxa_names(x)
sample_mean <- apply(ot.tab, 1, function(y){
if(all(y == 0)){
0
}else{
mean(y[y > 0])
}
})
sample_var <- apply(ot.tab, 1, function(y){
if(all(y == 0)){
0
}else{
var(y)
}
})
disp <- numeric(0)
for(i in 1:length(sample_var)){
disp[i] <- (sample_var[i] - sample_mean[i])/(sample_mean[i])^2
}
alpha_ij_0 <- rep(1e-04, length(mu_ij_0))
beta_ij_0 <- rep(1, length(mu_ij_0))
ind_not_na_of_mu_ij_0 <- which(!is.infinite(mu_ij_0))#max produce NA for all zeros
ind_less_one_mu_ij_0 <- which(abs(mu_ij_0) < 1)
if(stringent){
alpha_ij_0[ind_not_na_of_mu_ij_0] <- 1/gamma_ij_0[ind_not_na_of_mu_ij_0]
beta_ij_0[ind_not_na_of_mu_ij_0] <- 1/(gamma_ij_0[ind_not_na_of_mu_ij_0] *
mu_ij_0[ind_not_na_of_mu_ij_0])
beta_ij_0[ind_less_one_mu_ij_0] <- 1/(gamma_ij_0[ind_less_one_mu_ij_0]*sample_mean[ind_less_one_mu_ij_0])
}else{
alpha_ij_0[ind_not_na_of_mu_ij_0] <- 1/gamma_ij_0[ind_not_na_of_mu_ij_0]
beta_ij_0[ind_not_na_of_mu_ij_0] <- 1/(gamma_ij_0[ind_not_na_of_mu_ij_0] *
mu_ij_0[ind_not_na_of_mu_ij_0])
}
out <- list(mu_ij_0, gamma_ij_0, S_j0, species_name, sample_mean,
sample_var, alpha_ij_0, beta_ij_0)
names(out) = c("mu_ij_0", "gamma_ij_0", "S_j0", "species_name", "sample_mean",
"sample_var", "alpha_ij_0", "beta_ij_0")
return(out)
})
return(compAlphaBeta)
}
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
t1 <- proc.time()
post_all_blocks <- lapply(blks,function(x){
post_int_all_taxa <- samplingPosterior(psPlByBlock = psPlByBlock,
blk = x,
gammaPrior_Cont = gammaPrior_all_blks[[x]],
itera = 100,
ncores = ncores)
return(post_int_all_taxa)
})
proc.time()-t1
gammaPrior_posTrueSing_all_blocks <- list(gammaPrior_all_blks,post_all_blocks)
saveRDS(gammaPrior_posTrueSing_all_blocks, file= "./gammaPrior_posTrueSing_all_blocks.rds")
itera <- 100
burnIn <- 10
cov.pro <- .95
mak_tab <- TRUE
psByBlock <- readRDS("./psByBlock.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./gammaPrior_posTrueSing_all_blocks.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower.s <- list()
upper.s <- list()
lower.b <- list()
upper.b <- list()
all.zero.nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi.v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov.pro)
lower.s[[taxa]] <- round(hdi.v[1], digits = 0)
upper.s[[taxa]] <- round(hdi.v[2], digits = 0)
bb <- rgamma((itera-burnIn+1), shape= gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
exp_bb <- gammPrior[[sam]][[1]][taxa]/gammPrior[[sam]][[2]][taxa]
hdi.b <- hdi(bb, credMass = cov.pro)
lower.b[[taxa]] <- round(hdi.b[1], digits = 0)
upper.b[[taxa]] <- round(hdi.b[2], digits = 0)
all.zero.nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l.s = unlist(lower.s),
u.s = unlist(upper.s),
l.b = unlist(lower.b),
u.b = unlist(upper.b),
all.zero.nc = unlist(all.zero.nc))
df <- arrange(filter(df,(l.s > u.b) & (l.s > 0)), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l.s="Negative",
u.s="Negative",
l.b ="Negative",
u.b="Negative",
all.zero.nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(
df.p, heights = grobHeight(title) + padding, pos = 0
)
df.p <- gtable_add_grob(
df.p, list(title),
t = 1, l = 1, r = ncol(df.p)
)
grid.newpage()
grid.draw(df.p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = TRUE)
devtools::load_all(".")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = TRUE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
t1 <- proc.time()
post_all_blocks <- lapply(blks,function(x){
post_int_all_taxa <- samplingPosterior(psPlByBlock = psPlByBlock,
blk = x,
gammaPrior_Cont = gammaPrior_all_blks[[x]],
itera = 100,
ncores = ncores)
return(post_int_all_taxa)
})
proc.time()-t1
gammaPrior_posTrueSing_all_blocks <- list(gammaPrior_all_blks,post_all_blocks)
saveRDS(gammaPrior_posTrueSing_all_blocks, file= "./gammaPrior_posTrueSing_all_blocks.rds")
itera <- 100
burnIn <- 10
cov.pro <- .95
mak_tab <- TRUE
psByBlock <- readRDS("./psByBlock.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./gammaPrior_posTrueSing_all_blocks.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower.s <- list()
upper.s <- list()
lower.b <- list()
upper.b <- list()
all.zero.nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi.v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov.pro)
lower.s[[taxa]] <- round(hdi.v[1], digits = 0)
upper.s[[taxa]] <- round(hdi.v[2], digits = 0)
bb <- rgamma((itera-burnIn+1), shape= gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
exp_bb <- gammPrior[[sam]][[1]][taxa]/gammPrior[[sam]][[2]][taxa]
hdi.b <- hdi(bb, credMass = cov.pro)
lower.b[[taxa]] <- round(hdi.b[1], digits = 0)
upper.b[[taxa]] <- round(hdi.b[2], digits = 0)
all.zero.nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l.s = unlist(lower.s),
u.s = unlist(upper.s),
l.b = unlist(lower.b),
u.b = unlist(upper.b),
all.zero.nc = unlist(all.zero.nc))
df <- arrange(filter(df,(l.s > u.b) & (l.s > 0)), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l.s="Negative",
u.s="Negative",
l.b ="Negative",
u.b="Negative",
all.zero.nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./",
sample_names(psPlByBlock[[blk]])[sam],"S_T",
".png",
sep="")
png(filname, height = 600, width = 750)
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(
df.p, heights = grobHeight(title) + padding, pos = 0
)
df.p <- gtable_add_grob(
df.p, list(title),
t = 1, l = 1, r = ncol(df.p)
)
grid.newpage()
grid.draw(df.p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
t1 <- proc.time()
post_all_blocks <- lapply(blks,function(x){
post_int_all_taxa <- samplingPosterior(psPlByBlock = psPlByBlock,
blk = x,
gammaPrior_Cont = gammaPrior_all_blks[[x]],
itera = 100,
ncores = ncores)
return(post_int_all_taxa)
})
proc.time()-t1
gammaPrior_posTrueSing_all_blocks <- list(gammaPrior_all_blks,post_all_blocks)
saveRDS(gammaPrior_posTrueSing_all_blocks, file= "./gammaPrior_posTrueSing_all_blocks.rds")
itera <- 100
burnIn <- 10
cov.pro <- .95
mak_tab <- TRUE
psByBlock <- readRDS("./psByBlock.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./gammaPrior_posTrueSing_all_blocks.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower.s <- list()
upper.s <- list()
lower.b <- list()
upper.b <- list()
all.zero.nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi.v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov.pro)
lower.s[[taxa]] <- round(hdi.v[1], digits = 0)
upper.s[[taxa]] <- round(hdi.v[2], digits = 0)
bb <- rgamma((itera-burnIn+1), shape= gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
exp_bb <- gammPrior[[sam]][[1]][taxa]/gammPrior[[sam]][[2]][taxa]
hdi.b <- hdi(bb, credMass = cov.pro)
lower.b[[taxa]] <- round(hdi.b[1], digits = 0)
upper.b[[taxa]] <- round(hdi.b[2], digits = 0)
all.zero.nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l.s = unlist(lower.s),
u.s = unlist(upper.s),
l.b = unlist(lower.b),
u.b = unlist(upper.b),
all.zero.nc = unlist(all.zero.nc))
df <- arrange(filter(df,(l.s > u.b) & (l.s > 0)), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l.s="Negative",
u.s="Negative",
l.b ="Negative",
u.b="Negative",
all.zero.nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df.p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df.p <- gtable_add_rows(
df.p, heights = grobHeight(title) + padding, pos = 0
)
df.p <- gtable_add_grob(
df.p, list(title),
t = 1, l = 1, r = ncol(df.p)
)
grid.newpage()
grid.draw(df.p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
getwd()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
sourceDirectory("./R")
sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- ps
devtools::load_all(".")
ps <- ps
ps
ps <- subset_samples(ps,Sample_Type=!"Library_Control")
set1 <- c("1","2","3","4","11","12")
set2 <- c("5","6","7","8","9","10")
setP <- "P"
ext.num <- sample_data(ps)$Extraction_Number
blocks <-ifelse(ext.num %in% set1, "Set1", ifelse(ext.num %in% set2, "Set2", "SetP"))
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Healthy_Plasma","Patient_Plasma","Control"))
ps <- prune_taxa(taxa_sums(ps)>0, ps)
ps_plasma <- subset_samples(ps,Sample_Type%in%c("Healthy_Plasma","Patient_Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1, function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP>0, ps)
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
totalReads <- colSums(otu_table(ps))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample",breaks=50)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Healthy_Plasma","Patient_Plasma"), controllevel="Control", sampleName = "Sample_ID", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./psByBlock.rds")
getwd()
psNCbyBlock = psNCbyBlock
stringent = FALSE
x <- psNCbyBlock[[1]]
x
ps.to.dq <- phyloseq_to_deseq2(x, design = ~1)
geo.mean <- function(y) {
if(all(y == 0)){
val <- 0
}else{
val <- exp(sum(log(y[y > 0]))/length(y))
}
return(val)
}
geom.mean.row <- apply(counts(ps.to.dq), 1, FUN = geo.mean)
geom.mean.row
ps.to.dq <- estimateSizeFactors(ps.to.dq, geoMeans = geom.mean.row)
dq <- DESeq(ps.to.dq, fitType = "local", minReplicatesForReplace= Inf)
library.size.norm <- sizeFactors(dq)
library.size.norm
ot.tab <- t(t(otu_table(x))/library.size.norm)
S_j0 <- round(median(colSums(ot.tab)), digits = 0)
colSums(ot.tab)
mu_ij_0_all <- assays(dq)[["mu"]]
dim9mu_ij_0_all
dim(mu_ij_0_all)
ps
x
colSums(mu_ij_0_all)
colSums(mu_ij_0_all, na.rm = TRUE)
View(data.frame(colSums(ot.tab), colSums(mu_ij_0_all, na.rm = TRUE)))
assays(dq)["mu"]
assays(dq)[["mu"]]
assays(dq)[["mu"]][1,]
colSums(ot.tab)
summary(colSums(ot.tab))
summary(colSums(otu_table(x)))
